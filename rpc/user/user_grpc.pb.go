// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc/user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	User_MakeToken_FullMethodName   = "/user.user/MakeToken"
	User_CheckToken_FullMethodName  = "/user.user/CheckToken"
	User_DeleteToken_FullMethodName = "/user.user/DeleteToken"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	// 生成 token（登录）
	MakeToken(ctx context.Context, in *MakeToken_Request, opts ...grpc.CallOption) (*MakeToken_Response, error)
	// 校验 token（拓展校验、刷新 token）
	CheckToken(ctx context.Context, in *CheckToken_Request, opts ...grpc.CallOption) (*CheckToken_Response, error)
	// 移除 token（安全退出）
	DeleteToken(ctx context.Context, in *DeleteToken_Request, opts ...grpc.CallOption) (*DeleteToken_Response, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) MakeToken(ctx context.Context, in *MakeToken_Request, opts ...grpc.CallOption) (*MakeToken_Response, error) {
	out := new(MakeToken_Response)
	err := c.cc.Invoke(ctx, User_MakeToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CheckToken(ctx context.Context, in *CheckToken_Request, opts ...grpc.CallOption) (*CheckToken_Response, error) {
	out := new(CheckToken_Response)
	err := c.cc.Invoke(ctx, User_CheckToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteToken(ctx context.Context, in *DeleteToken_Request, opts ...grpc.CallOption) (*DeleteToken_Response, error) {
	out := new(DeleteToken_Response)
	err := c.cc.Invoke(ctx, User_DeleteToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	// 生成 token（登录）
	MakeToken(context.Context, *MakeToken_Request) (*MakeToken_Response, error)
	// 校验 token（拓展校验、刷新 token）
	CheckToken(context.Context, *CheckToken_Request) (*CheckToken_Response, error)
	// 移除 token（安全退出）
	DeleteToken(context.Context, *DeleteToken_Request) (*DeleteToken_Response, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) MakeToken(context.Context, *MakeToken_Request) (*MakeToken_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeToken not implemented")
}
func (UnimplementedUserServer) CheckToken(context.Context, *CheckToken_Request) (*CheckToken_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckToken not implemented")
}
func (UnimplementedUserServer) DeleteToken(context.Context, *DeleteToken_Request) (*DeleteToken_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToken not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_MakeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeToken_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).MakeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_MakeToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).MakeToken(ctx, req.(*MakeToken_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckToken_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CheckToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CheckToken(ctx, req.(*CheckToken_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteToken_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DeleteToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteToken(ctx, req.(*DeleteToken_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.user",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeToken",
			Handler:    _User_MakeToken_Handler,
		},
		{
			MethodName: "CheckToken",
			Handler:    _User_CheckToken_Handler,
		},
		{
			MethodName: "DeleteToken",
			Handler:    _User_DeleteToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/user.proto",
}
